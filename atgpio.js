function win32or64(){return"x86"===process.env.PROCESSOR_ARCHITECTURE&&process.env.PROCESSOR_ARCHITEW6432?64:"AMD64"===process.env.PROCESSOR_ARCHITECTURE?64:"x64"===process.env.CURRENT_CPU?64:32}function AtGpio(){gpioInited||AtGpio.prototype.init()}function checkPin(o){const t=Number(o);if(gpioInited||AtGpio.prototype.init(),t<0||t>=gpioCount)throw new Error("Invalid pin");return t}function checkValue(o){const t=Number(o);if(gpioInited||AtGpio.prototype.init(),t!==AtGpio.prototype.LOW&&AtGpio.prototype.HIGH!==t)throw new Error("Invalid value");return t}function checkMode(o){const t=Number(o);if(gpioInited||AtGpio.prototype.init(),t!==AtGpio.prototype.INPUT&&t!==AtGpio.prototype.OUTPUT)throw new Error(`Unsupported mode ${t}`);return t}function cleanup(){binding.Close(),gpioCount=0,gpioInited=!1}const bindingPath=64===win32or64()?"./binding/x64/node-advgpio.node":"./binding/ia32/node-advgpio.node",binding=require(bindingPath);let gpioInited=!1,gpioCount=0;AtGpio.prototype.LOW=0,AtGpio.prototype.HIGH=1,AtGpio.prototype.INPUT=1,AtGpio.prototype.OUTPUT=0,AtGpio.prototype.init=(()=>{binding.Open(),gpioCount=binding.GetGPIOCount(),gpioInited=!0}),AtGpio.prototype.setup=((o,t,i)=>{gpioInited||AtGpio.prototype.init();const n=checkPin(o),e=checkMode(t);void 0!==i?binding.Setup(n,e,checkValue(i)):binding.Setup(n,e)}),AtGpio.prototype.read=(o=>binding.Read(checkPin(o))),AtGpio.prototype.write=((o,t)=>binding.Write(checkPin(o),checkValue(t))),AtGpio.prototype.getmode=(o=>{const t=checkPin(o);return binding.GetGPIODirection(t)}),AtGpio.prototype.count=(()=>(gpioInited||AtGpio.prototype.init(),gpioCount)),process.on("exit",o=>{console.log(`[ATGPIO] About to exit with code: ${o}`),cleanup()}),process.on("uncaughtException",o=>{console.error("UNCAUGHT EXCEPTION:",o),process.exit(1)}),module.exports=new AtGpio;
